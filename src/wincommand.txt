std::vector<std::tuple<std::string, std::string, std::string>> devices;
    char buffer[256];

    FILE* pipe = _popen("arp -a", "r"); // Execute "arp -a" and capture output

    if (!pipe) {
        std::cerr << "Error running arp -a command." << std::endl;
        //manage error
    }

    std::regex deviceRegex(R"((\d+\.\d+\.\d+\.\d+)\s+([0-9A-Fa-f]+-[0-9A-Fa-f]+-[0-9A-Fa-f]+-[0-9A-Fa-f]+-[0-9A-Fa-f]+-[0-9A-Fa-f]+)\s+(\w+))");

    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        std::string line(buffer);
        std::smatch match;

        if (std::regex_search(line, match, deviceRegex)) {
            if (match.size() == 4) {
            	std::string whole = match[0];
                std::string ipv4Address = match[1];
                std::string physicalAddress = match[2];
                std::string type = match[3];

                bool isStatic;
                if (type.compare("static") == 0)
                    isStatic = true;
                else 
                    isStatic = false;

                //ipv4, ipv6, gateway, wired/wireless, flags, ports, static/dynamic, mac
                Device d(ipv4Address, isStatic, physicalAddress);
                deviceList.push_back(d);
            }
        }
    }

    _pclose(pipe);